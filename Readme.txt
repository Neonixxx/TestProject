Задание №1. Необходимо реализовать приложение WebApi на версии .NET Core 3.1.
    - Формат запроса/ответа должен быть JSON
    - Методы API должны быть асинхронными.
    - В качестве СУБД необходимо воспользоваться решением LocalDB от MsSqlServer
    - В качестве ORM необходимо использовать EntityFrameworkCore.
    - В качестве клиента для тестирования приложения необходимо подключить Swagger
    - В качестве моделей данных должны использоваться следующие сущности:
        - User(UserId, Login, Password, CreatedDate, UserGroupId, UserStateId)
        - UserGroup(UserGroupId, Code, Description)
            - Code =Admin
            - Code =User
        - UserState(UserStateId, Code, Description)
            - Code =Active
            - Code =Blocked
Требования бизнес-логики и ограничения:
- Приложение должно позволять добавлять / удалять / получать пользователей. Получить можно как одного, так и всех пользователей (добавление / удаление только по одному). При получении пользователей должна возвращаться полная информация о них (со UserState и UserGroup).
- Система должна не позволять иметь более одного пользователя с userGroup = Admin.
- После успешного регистрации нового пользователя, ему должен быть выставлен статус "Active". Добавление нового пользователя должно занимать 5 сек. За это время при попытке добавления пользователя с таким же Login должна возвращаться ошибка.
- Удаление пользователя должно осуществляться не путём физического удаления из таблицы, а путём выставления статуса "Blocked" у пользователя.
- Допускается добавлять вспомогательные данные в существующие таблицы.

ОПЦИОНАЛЬНО
 - В качестве способа авторизации следует использовать JWT-токены.
 - Написать unit-тесты с помощью nUnit / xUnit
 - Сделать возможность добавления и удаления пользователей только от имени администратора (пользователя с UserGroup=Admin)
 
 Задание №2. Тестовое задание по SQL
 Есть 2 таблицы с данными:
 CREATE TEMP TABLE tmp_a ( VALUE INT);
 CREATE TEMP TABLE tmp_b ( VALUE INT);
 INSERT INTO tmp_a (VALUE) values (10);
 INSERT INTO tmp_b (VALUE) VALUES (100);
 Написать универсальный запрос для PostgreSQL, который возвращает значение либо из tmp_a (если есть значение), либо из tmp_b (если есть значение). 
 Если в обоих таблицах нет значений, то возвращается NULL
 Т.е. можно очистить таблицу А, и тогда должно вернуться значение из таблицы B (и наоборот). А если очистить обе таблицы, то этот же запрос должен вернуть NULL
 
 select a.* from tmp_a a
 union all
 select b.* from tmp_b b
 union all
 select null
 limit 1;